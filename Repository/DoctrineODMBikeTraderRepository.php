<?php

namespace SoftwareDesk\BikeTraderAPIBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use SoftwareDesk\BikeTraderAPIBundle\Entity\BikeTraderRepositoryInterface;
use SoftwareDesk\BikeTraderAPIBundle\Model\BicycleInterface;

//use SoftwareDesk\BikeTraderAPIBundle\Document\Bicycle;

/**
 * DoctrineODMBikeTraderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * This class is specifically coupled with the Doctrine ORM.
 * It implements the persistence storage agnostic interface of
 * BikeTraderRepositoryInterface which is injected into the
 * BikeTraderManager.
 */
class DoctrineODMBikeTraderRepository extends DocumentRepository implements BikeTraderRepositoryInterface
{


    public function findBikeByType($type)
    {
        $bike = $this -> getDocumentManager() -> getRepository('SoftwareDeskBikeTraderAPIBundle:Bicycle')
                ->findBy(array('type' => $type));
        return $bike;
    }

    /**
     * @param Bicycle $bicycle
     *
     * Put the save method here so do not require an entity manager or
     * the more general Manager Registry injected into the Bike Trader Manager
     * class which keep it less coupled.
     */
    public function save(BicycleInterface $bicycle)
    {
        $em = $this -> getDocumentManager();
        $em -> persist($bicycle);
        $em -> flush();
    }

    public function findBikeById($id)
    {
        // 54e1e0c5f889de862b8b4567
//        $this -> getDocumentManager() -> clear();

        $bike = $this -> getDocumentManager()->getRepository('SoftwareDeskBikeTraderAPIBundle:Bicycle')
            ->find($id);

        return $bike;
    }

    /**
     * This detaches all documents that are currently managed
     * by the document manager instance.
     */
    public function clearTheEntityManager()
    {
        $this -> getDocumentManager() -> clear();
    }


    public function getLastModifiedTimestampForBike($id)
    {
// 54e1e0c5f889de862b8b4567

//        echo PHP_EOL.'In the TIMESTAMP method now'.PHP_EOL;

        $query = $this -> getDocumentManager() -> createQueryBuilder('SoftwareDeskBikeTraderAPIBundle:Bicycle')
            -> select('createdAt')
            -> field('id') -> equals("$id")
            -> getQuery()->execute();

// -> where("function() { return this.name == 'Prestigio MongoDB Fixture'; }")
// This is another way of reducing results using javascript in the where clause.

        $bikeObject = $query -> getSingleResult();
        /**
         * Here Doctrine returns the result as an Object with the queried Id field
         * and the selected field also.
         */
//print_r($bikeObject);
//print_r(var_dump($bikeObject -> getCreatedAt()));
//echo PHP_EOL.PHP_EOL;
//exit;

        return $bikeObject -> getCreatedAt();


/*        $query = $this -> getDocumentManager() -> createQueryBuilder()
            ->select('b.createdAt')
            -> from('SoftwareDeskBikeTraderAPIBundle:Bicycle', 'b')
            -> where('b.id = :bikeId')
            -> setParameter('bikeId', $id)
            -> getQuery();

        $timestamp = $query -> getSingleResult();
        return $timestamp;
*/

    }





    public function getPrimaryKeyForEntity($entity)
    {
        $em = $this -> getDocumentManager();
        $meta = $em -> getClassMetadata(get_class($entity));
        $identifierArray = $identifier = $meta->getIdentifier();

        // The first element in the array (and the only one) is the primary key.
        $primaryKey = $identifierArray[0];
        return $primaryKey;
    }



    // ** SEE IF THIS IS THE BEST LOCATION FOR THIS ???
    // WAIT UNTIL THE MAIN CODE IS REDESIGNED FIRST BEFORE LOOKING AT THIS LOCATION...
    public function update()
    {
        $em = $this -> getDocumentManager();
        $em -> flush();
    }

    public function delete(BicycleInterface $bicycle)
    {
        $em = $this -> getDocumentManager();
        $em -> remove($bicycle);
        $em -> flush();
    }



}

